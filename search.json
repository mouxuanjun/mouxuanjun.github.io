[{"title":"关于我和这个博客","url":"/2025/05/07/about-me/","content":"个人信息笔者目前就读于杭州电子科技大学，是一名大二的学生，同时也是RoboMaster（以下简称RM）比赛的成员。我在RM25赛季负责步兵机器人的嵌入式研发，目前正在担任RM26赛季嵌入式电控组组长。\n兴趣爱好\n电子设计与DIY\n嵌入式开发：C， C++， MCU， ARM， STM32\n开源项目贡献\n足球， CS， PUBG， galgame…\n\n建站目的我很早就有建一个个人博客的想法，但是一直没空(并非没空，就是纯懒)，所以迟迟没有动手操作。现在我的比赛暂时告一段落，于是按照朋友推荐的方法，参照网上的资料搭建了你现在浏览的这个博客。\n其实我对很多好玩的东西都有浓厚的兴趣，但是由于我个人的能力问题，以及对自身控制力的不够，导致很多事情关注了但是没开始。或者开始了，遇到一个难题，然后又半途而废了。亦或者一个功能做出来了，但是背后的很多知识是没有掌握透的，于是也希望通过在这个博客分享记录，督促自己学习进步\n博客内容\n嵌入式相关知识的学习经验与成果展示\n其他一些有趣开源项目的学习记录\nACG相关内容，短评之类\n个人随记\n\n具体内容并没有一个标准，想到什么就发什么\n联系方式\nGithub: mouxuanjun\nEmail: hewenxuan040923@gmail.com\nQQ: 1583164119\n\n权限说明本博客全部内容（除特殊说明外）均采用 CC BY-NC-SA 4.0 协议进行许可。\n"},{"title":"新建一个博客以及博客维护","url":"/2025/10/05/hexo-blog/","content":"简述本文档主要记录了如何从零开始新建一个博客，以及为后续维护提供一个指导。该博客采用Hexo框架，部署到github pages，主题则为redefine\n环境\nWindows 11或Ubuntu 24.04\n\n建立第一个博客建议直接查看官方教程，会比本文档更加全面\n\nHexo官方文档\nredefine主题官方文档\n\n1. 下载并安装git\nWindows：请前往git官网下载安装包\nUbuntu：在终端执行以下命令  sudo apt update #更新软件包列表sudo apt-get install git-core -y #安装git\n输入以下命令，如果有版本号输出则表示git安装成功\n\ngit --version\n2. 下载并安装Node.js\nWindows：请前往Node.js官网下载安装包并安装。不过更建议使用NVM来管理Node.js版本，此处不过多介绍nvm的安装和使用，建议自行搜索相关教程\nUbuntu：使用如下命令安装。但是笔者首次建站是在windows上操作的，建议自行查找相关更权威的文档  sudo apt update #更新软件包列表sudo apt install -y curl #安装curlcurl -fsSL https://deb.nodesource.com/setup_23.x -o nodesource_setup.sh #下载Node.js安装脚本sudo -E bash nodesource_setup.sh #运行安装脚本sudo apt install -y nodejs #安装Node.js\n输入以下命令，如果有版本号输出则表示node.js安装成功\n\nnode -v\n3. 安装Hexo在终端执行以下命令安装Hexo\nnpm install -g hexo-cli\n输入以下命令，如果有一堆版本号输出则表示Hexo安装成功\nhexo -v\n4. 创建博客在你想要存放博客的目录下打开终端，执行以下命令\nhexo init &lt;folder&gt;cd &lt;folder&gt;npm install\n其中&lt;folder&gt;为你想要创建的博客目录名称,完成后项目文件夹将如下所示\n.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes\n具体各级文件夹分别是什么含义请自行查看官方文档，这里不需赘述\n5. 安装并启用redefine主题在终端执行以下命令\nnpm install hexo-theme-redefine@latest\n然后打开_config.yml文件，找到theme字段，将其值改为redefine\ntheme: redefine\n6. 配置redefine主题创建一个_config.redefine.yml文件(请确保文件名完全一致)，并将此处内容复制进去,此时redefine主题会自动覆盖hexo默认主题的配置项。然后具体怎么按自己喜欢的样式配置请查看官方文档，内容过多此处不再赘述。\n7. 本地预览在博客路径下的终端执行以下命令\nhexo clean #清除缓存（可选）hexo g #生成静态文件hexo s #启动本地服务器\n此时在浏览器访问http://localhost:4000即可预览博客\n8. 创建git仓库创建一个GitHub仓库，且仓库名字必须是&lt;github_username&gt;.github.io，其中&lt;github_username&gt;为你的GitHub用户名，勾选Initialize this repository with a README，然后点击Create repository按钮创建仓库。\n9. 部署到GitHub Pages在博客路径下的终端执行以下命令\nnpm install hexo-deployer-git --save #安装部署插件\n然后打开_config.yml文件，找到deploy字段，修改为如下内容\ndeploy:  type: git  repository: git@github.com:用户名/用户名.github.io.git # 替换为你的仓库地址  branch: main #如果你的默认分支是master则改为master\n然后执行以下命令部署\nhexo clean #清除缓存（可选）hexo g #生成静态文件hexo d #部署到GitHub Pages\n此时访问https://&lt;github_username&gt;.github.io即可看到你的博客上线了\n如何写文章本教程是以草稿-正文的形式教学，即先创建草稿，草稿写完后发布为正式文章。但是实际使用过程中也可以直接新建正文具体操作为把第1步中的draft改为post即可。\n1. 创建一个草稿在博客路径下的终端执行以下命令\nhexo new draft &quot;文章标题&quot;\n此时你的source/_drafts目录下会生成一个新的markdown文件，文件名为文章标题.md，打开该文件即可编辑文章内容如果要预览草稿则输入以下命令\nhexo clean #清除缓存（可选）hexo g #生成静态文件hexo server --draft #启动本地服务器（可查看草稿渲染）\n2. 发布文章在博客路径下的终端执行以下命令\nhexo publish draft &quot;文章标题&quot;\n此时你的文件会从source/_drafts目录移动到source/_posts目录下\n3. 推送到GitHub Pages在博客路径下的终端执行以下命令\nhexo clean #清除缓存（可选）hexo g #生成静态文件hexo d #部署到GitHub Pages\n\n跨平台管理博客如果你想在多台电脑或者不同的操作系统上管理你的博客，可以使用git来同步博客内容。以下是具体操作步骤\n1. 推送本地博客重要配置到远程仓库可以直接使用相同仓库用不同的分支做区分即可，在博客路径下的终端执行以下命令\ngit init #初始化git仓库git add . #添加所有文件git commit -m &quot;Initial commit&quot; #提交更改git remote add origin &lt;url&gt; #连接远程仓库git checkout -b &lt;branch&gt; #新建并切换分支git push -u origin &lt;branch&gt; #推送到远程仓库\n2. 在另一台电脑上克隆仓库在另一台电脑上配置好博客需要的环境，然后在你想要存放博客的目录下打开终端，执行以下命令\ngit clone -b &lt;branch&gt; &lt;url&gt; #克隆远程仓库的指定分支cd &lt;folder&gt; #进入博客目录npm install #安装依赖\n3. 修改博客内容写完后相同步骤生成并部署\nhexo clean #清除缓存（可选）hexo g #生成静态文件hexo d #部署到GitHub Pages\n4. 然后将更改推送到远程仓库git add . #添加所有文件git commit -m &quot;Update blog&quot; #提交更改git push origin &lt;branch&gt; #推送到远程仓库\n5. 更新博客环境如果你在一台电脑上修改了博客内容，那么另一台电脑需要先拉取最新的更改，然后再进行修改\ngit pull origin &lt;branch&gt; #拉取远程仓库的最新更改\n\n一些我在使用过程中遇到的问题1. Redefine主题的nodejieba安装失败原因：我在把window建立的博客克隆到Ubuntu上时，没有做好隔离，导致Windows编译的文件：nodejieba.node被Ubuntu编译器编译出来的强制覆盖了，导致无法使用，且在windows上删除node_modules文件夹，然后重新执行npm install，重新编译安装所有依赖也无法使用。可能还有我未知的原因还未查明。\n解决方法：使用如下命令创建模拟的nodejieba模块\n# 1. 先删除有问题的文件(直接删除文件夹也可以)rm -rf node_modules/nodejieba# 2. 重新创建目录mkdir -p node_modules/nodejieba# 3. 使用 PowerShell 正确创建文件（推荐）@&quot;module.exports = &#123;  cut: function(text) &#123; return text ? [text] : []; &#125;,  cutAll: function(text) &#123; return text ? [text] : []; &#125;,  cutForSearch: function(text) &#123; return text ? [text] : []; &#125;,  tag: function(text) &#123; return text ? [[text, &#x27;n&#x27;]] : []; &#125;,  extract: function(text, topn) &#123; return text ? [&#123;word: text, weight: 1&#125;] : []; &#125;,  load: function() &#123; return true; &#125;,  insertWord: function(word) &#123; return true; &#125;&#125;&quot;@ | Out-File -FilePath node_modules/nodejieba/index.js -Encoding utf8# 4. 测试hexo ghexo s\n\ntodo\n 更换域名\n 让国内访问更快\n 添加评论系统\n 添加搜索功能\n 添加Tag功能\n 添加友链\n\n","tags":["blog","教程"]},{"title":"在Ubuntu上搭建STM32开发环境（CUBEMX+Clion+Ozone）","url":"/2025/10/05/stm32-ubuntu-clion/","content":"简述本文主要介绍ubuntu环境下使用CUBEMX+Clion+Ozone进行stm32开发的环境配置，适用于初学者。至于为啥要用Clion而不是Keil或者IAR，主要是因为Clion是跨平台的IDE，且对CMake支持很好，且免费（学生教育认证），而Keil和IAR都是收费的(但是有不收费的手段doge)，并且只能在Windows下使用。\n开发环境\nUbuntu 24.04\n\n下载并安装CUBEMX\n直接去st官网下载最新版本的CUBEMX，应该需要你登录，没有账号的按指示注册一个登录即可，下载后解压到你想放的地方即可。\n进入解压后的文件夹，执行./SetupSTM32CubeMX-x.xx.x (可能名字会有区别，反正运行安装程序就完了)，会出现一个图形化界面，按提示安装即可。\n打开下载完成的Cubemx，登录第一步注册的账号后,点击INSTALL/REMOVE下载所需软件包即可，例如我使用RoboMaster的C板，则下载STM32F4系列的软件包即可。\n\n下载并安装Clion\n直接去官网下载最新版本的Clion安装包，下载后放到任意位置(推荐放到/opt/clion目录下)解压即可。解压命令：\n\nsudo tar -xvf CLion-*.tar.gz -C /opt/clion --strip=1\n\n进入解压后的文件夹，执行./clion.sh即可打开Clion，或者直接双击clion文件\n第一次打开会提示你输入激活码，直接选择Evaluate for free即可免费试用30天，或者直接进行学生教育认证，很简单的，去Jetbrains官网按要求操作即可。\n进入Clion后，选择Settings → Build, Execution, Deployment → Toolchains，配置好C和C++编译器为/usr/bin/arm-none-eabi-gcc和/usr/bin/arm-none-eabi-g++（如果是其他路径选择对应路径即可）。这里配置是因为我clion自动查找的的gcc和g++并非arm-none-eabi版本的，导致后续编译会报错，但是我有同学是可以不用手动配置的，请更具实际情况选择。\n\n安装gcc-arm-none-eabi编译器和cmake\n输入安装命令：\n\nsudo apt updatesudo apt install gcc-arm-none-eabisudo apt install cmake -y\n\n验证安装是否成功\n\narm-none-eabi-gcc --versioncmake --version\n有内容输出即可\n安装openocd(可选)\n输入安装命令：\n\nsudo apt install openocd -y\n\n验证安装是否成功\n\nopenocd --version\n有内容输出即可\n安装JLink和Ozone\n直接去Segger官网下载最新版本的JLink和Ozone安装包解压命令：\n\nsudo apt install ./JLink_Linux_V788e_x86_64.debsudo apt install ./Ozone_Linux_V788e_x86_64.deb\n\n验证安装是否成功\n\nJLinkExe\n有内容输出即可\nOzone\n会启动Ozone即可3. 官方教学里是建议将 JLink 目录添加到环境变量中，但笔者操作时忘记这一步发现也是可以的，也可能是最新版Jlink在下载的时候会自动添加？命令如下：\necho &#x27;export PATH=$PATH:/opt/SEGGER/JLink&#x27; &gt;&gt; ~/.bashrcsource ~/.bashrc\n\n点个灯试试\n打开CUBEMX，选择New Project，选择你要使用的芯片型号，例如我使用RoboMaster的C板，则选择STM#32F4407IGH6，然后点击Start Project。\n配置相应工程，这里只是环境配置教学，就不赘述了。配置好后点击Project Manager，然后选择Toolchain/IDE为CubeIDE，然后点击Generate Code即可生成代码。这里我有个疑问，我亲测如果选择CMake，生成的代码直接编译会过不去，makefile我没试过，所以建议直接选择CubeIDE。\n用Clion打开工程文件夹，首次先右键选择cmake点击Build，如果顺利的话会生成.elf文件在Debug文件夹下。\n连接好JLink和开发板，打开Ozone，Device选择STM32F407IG，Peripheral选择/opt/SEGGER/Ozone_Vxxx/Config/Peripheral/STM32F407IG.svg，然后点击Next。在接下来的窗口中Target Interface选择SWD，并点击下面识别到的Jlink编号，点击Next，最后选择对应的elf文件，后面一路点Next即可。\n点击Start Debugging，然后点击左上角的Run按钮，点亮LED灯即可。由于Clion目前对Jlink的烧录配置过程不是很友好，所以建议直接通过在ozoneDebug的方式进行烧录和调试。\n\n","tags":["教程","stm32开发环境","ubuntu"]},{"title":"GIT的基础使用","url":"/2025/05/07/use-of-git/","content":"使用Git的原因及简单介绍\n版本管理可以跟踪代码历史，每次修改都有记录，方便回溯和恢复。可以随时回退到之前的版本，防止误操作导致数据丢失。\n团队协作多人可以同时开发，不用担心代码冲突。通过分支（Branch），不同任务可以独立开发，最后合并到主分支。\n代码备份代码托管在 GitHub、Gitee、GitLab 等平台，不怕本地数据丢失。任何地方都可以拉取代码，随时恢复开发环境。\n提高开发效率多人协作更流畅，自动合并代码，减少手动修改的麻烦。\n适用于开源和企业项目GitHub、Gitee 上的开源项目都用 Git，方便贡献代码。企业团队普遍采用 Git 管理代码，提高协作效率。简单来说：Git 能帮助你更安全、更高效地管理代码，并支持多人协作。\n\n一、下载并安装GitWindows：1. 官网下载：Git下载链接2. 安装记得换路径，不要安装到C盘。其他一路默认就可，也可以打开自动更新，添加快捷图标等。3. 安装完成后按Win+R输入cmd回车打开Windows PowerShell，输入：git --version\n输出版本号，代表安装成功。\nLinux:1. 命令行输入sudo apt install git -y\n2.完成后输入：git --version\n输出版本号，代表安装成功。\n二、配置Git1. 在任意路径右键-&gt;查看更多选项-&gt;Open Git Bash Here，打开git命令终端。2. 输入以下命令配置身份信息（建议使用真实信息）：git config --global user.name &quot;你的GitHub用户名&quot;git config --global user.email &quot;你的GitHub邮箱&quot;\n检查配置是否成功：\ngit config --list\n\n三、创建本地仓库1. 在项目目录下按第二点所说流程打开git中断，或直接输入cd 你的项目目录\n2. 输入以下命令，会在文件里创建一个.git文件，出现代表创建成功git init\n\n四、创建GitHub仓库1. 注册账号并登录GitHub2. 点击 “New Repository” ，配置仓库信息后创建一个新仓库3. 复制仓库的HTTPS或SSH地址，稍后会用到五、连接本地仓库和远程仓库有两种方式，分别是ssh和https，但是综合比较，ssh比https好很多，推荐使用。\n\nHTTPS 方式在每次 git push 或 git pull 时，都可能要求输入 GitHub 账户的用户名和密码（如果未配置凭据存储）。SSH 方式则使用 SSH Key 进行身份认证，只需要配置一次，以后就能自动认证，无需手动输入密码。\nHTTPS 认证 需要使用 GitHub 个人访问令牌（PAT），而 PAT 具有一定的权限，一旦泄露，可能带来安全隐患。SSH 认证 通过 公私钥加密，私钥存放在本地，公钥添加到 GitHub，即使公钥泄露也无法被滥用。只要私钥安全（不要泄露 id_rsa），就能保证 SSH 认证的安全性  \nSSH 方式 使用 Git 协议，默认端口 22，在某些环境下比 HTTPS 方式（走 443 端口）速度更快，尤其是 大文件传输 时表现更好。   \nHTTPS 方式 在访问私有仓库时，每次都需要身份验证，而 SSH 方式一旦设置好，访问私有仓库更方便。在某些内网或防火墙环境下，HTTPS 可能被拦截，而 SSH 可能不受影响，可以更稳定地访问 GitHub 或其他 Git 服务器。(校园网环境https基本传不出去doge)\n\nHTTPS方法git remote add origin 你的GitHub仓库地址（https地址）git remote add origin git branch -M main  # 将默认分支改为 main（可选，好习惯）\nSSH方法1. 首先要生成一个SSH Keyssh-keygen -t rsa -C &quot;你的GitHub邮箱&quot;\n一直按回车，直到生成完成   \n2. 添加SSH Key打开公钥文件，粘贴公钥并保存\ncat ~/.ssh/id_rsa.pub\n3. 把公钥添加到github中1. 点击右上角头像 → Settings\n2. 左侧栏点击 SSH and GPG keys\n3. 点击 New SSH key\n4. 粘贴公钥内容\n\n4. 测试是否成功ssh -T git@github.com\n如果成功会看到如下输出：\nHi 用户名! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.\n5. 链接本地仓库和Github仓库git remote add origin 你的GitHub仓库地址（ssh地址）\n检查连接情况输入以下命令即可看到当前仓库链接的所有远程仓库，对，一个本地仓库可以链接多个远程仓库的。\ngit remote -v\n输出github仓库地址即完成连接\n六、 提交代码git add . #添加内容进暂存区git commit -m &quot;提交信息&quot; #把暂存区内容存到本地仓库git push origin main #把本地仓库更改推送到远程仓库main分支\n\n七、回退版本回退到上一个版本\n保留代码修改（常用），保留代码和暂存区\n\ngit reset --soft HEAD^\n\n丢弃修改（常用），丢弃暂存区修改，保留代码\n\ngit reset --mixed HEAD^\n\n彻底删除（危险⚠️），回退commit+暂存+修改全清除\n\ngit reset --hard HEAD^\n回退到指定版本1. 查看commit记录git log\n会看到如下输出：\ncommit a1b2c3d4e5f6g7h8... #复制这段Author: xxxDate: ...Message: 修复登录问题\n2. 回退git reset --soft a1b2c3d\n或\ngit reset --mixed a1b2c3d\n或\ngit reset --hard a1b2c3d\n撤销回退1. 查看refloggit reflog\n会列出所有的操作记录\na1b2c3d HEAD@&#123;0&#125;: reset: moving to HEAD^e5f6g7h HEAD@&#123;1&#125;: commit: 修复登录问题\n2. 滚到指定操作记录git reset --hard e5f6g7h\n\n八、 新建分支\n\n\n优点\n说明\n\n\n\n✅ 避免冲突\n每人开发自己的功能，互不干扰。\n\n\n✅ 更清晰\n分支命名可以反映开发内容\n\n\n✅ 易于管理\n可以单独审核每个人的代码\n\n\n✅ 回退方便\n如果某个人的功能不稳定，可以只回滚或暂停该分支\n\n\n具体操作为：\n\n\n\ngit switch -c feature/mywork #创建并切换到新分支\n查看是否成功：\ngit branch -vv\n如果成功会有如下输出：\n* feature/mywork  123abc [origin/feature/mywork] commit message\n九、多人协作开发基本规定：\n\nmain ：主分支，保证是稳定版本\ndev ：开发分支，用于开发新的功能\nfeature&#x2F;xxxx ：功能分支，用于开发新的功能\nhotfix&#x2F;xxxx ：bug修复分支，用于修复bug\n\n1. 克隆主仓库git clone 仓库地址\n2. 切换到dev分支git checkout dev #切换到dev分支git pull origin dev #拉取远程dev分支到本地dev分支\n3. 创建自己的功能分支git switch -c feature/xxxx #创建并切换到新分支\n4. 开发自己的功能，并提交代码到feature&#x2F;xxxx分支,推送到远端分支5. 合并到dev分支（由管理员&#x2F;审核人执行）可以在远程仓库直接操作或在本地合并：\ngit checkout dev #切换到dev分支git pull origin dev #拉取远程dev分支到本地dev分支git merge feature/xxxx #合并feature/xxxx分支到dev分支git push origin dev #把dev分支推送到远程dev分支\n6. 删除已完成分支git branch -d feature/xxxx #删除本地分支git push origin --delete feature/xxxx #删除远端分支\n\n附加VsCode推送代码图形化界面，易于操作，原理同终端。\n\n把要保留更改的文件添加到暂存区\n写提交信息，把暂存区内容加入本地仓库\n点击发布，把本地仓库修改推送到远程仓库\n\n标准格式之前教的虽然够用，但其实每次推送提交的信息格式都不是很标准，用命令行操作过于复杂，可以使用VsCode的“git-commit-pligin”插件实现，具体过程不在赘述，请自行查阅插件说明\n结束总结以上内容只是Git的最基础的使用，也只是Git的冰山一角，Git还有很多很多功能没介绍到，大家可以自己去发现，之后发现好用的功能会不定时更新此文档   \n","tags":["教程","git"]}]