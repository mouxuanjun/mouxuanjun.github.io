[{"title":"GIT的基础使用","url":"/2025/05/07/use-of-git/","content":"使用Git的原因及简单介绍\n版本管理可以跟踪代码历史，每次修改都有记录，方便回溯和恢复。可以随时回退到之前的版本，防止误操作导致数据丢失。\n团队协作多人可以同时开发，不用担心代码冲突。通过分支（Branch），不同任务可以独立开发，最后合并到主分支。\n代码备份代码托管在 GitHub、Gitee、GitLab 等平台，不怕本地数据丢失。任何地方都可以拉取代码，随时恢复开发环境。\n提高开发效率多人协作更流畅，自动合并代码，减少手动修改的麻烦。\n适用于开源和企业项目GitHub、Gitee 上的开源项目都用 Git，方便贡献代码。企业团队普遍采用 Git 管理代码，提高协作效率。简单来说：Git 能帮助你更安全、更高效地管理代码，并支持多人协作。\n\n一、下载并安装GitWindows：1. 官网下载：Git下载链接2. 安装记得换路径，不要安装到C盘。其他一路默认就可，也可以打开自动更新，添加快捷图标等。3. 安装完成后按Win+R输入cmd回车打开Windows PowerShell，输入：git --version\n输出版本号，代表安装成功。\n二、配置Git1. 在任意路径右键-&gt;查看更多选项-&gt;Open Git Bash Here，打开git命令终端。2. 输入以下命令配置身份信息（建议使用真实信息）：git config --global user.name &quot;你的GitHub用户名&quot;git config --global user.email &quot;你的GitHub邮箱&quot;\n检查配置是否成功：\ngit config --list\n\n三、创建本地仓库1. 在项目目录下按第二点所说流程打开git中断，或直接输入cd 你的项目目录\n2. 输入以下命令，会在文件里创建一个.git文件，出现代表创建成功git init\n\n四、创建GitHub仓库1. 注册账号并登录GitHub2. 点击 “New Repository” ，配置仓库信息后创建一个新仓库3. 复制仓库的HTTPS或SSH地址，稍后会用到五、连接本地仓库和远程仓库有两种方式，分别是ssh和https，但是综合比较，ssh比https好很多，推荐使用。\n\nHTTPS 方式在每次 git push 或 git pull 时，都可能要求输入 GitHub 账户的用户名和密码（如果未配置凭据存储）。SSH 方式则使用 SSH Key 进行身份认证，只需要配置一次，以后就能自动认证，无需手动输入密码。\nHTTPS 认证 需要使用 GitHub 个人访问令牌（PAT），而 PAT 具有一定的权限，一旦泄露，可能带来安全隐患。SSH 认证 通过 公私钥加密，私钥存放在本地，公钥添加到 GitHub，即使公钥泄露也无法被滥用。只要私钥安全（不要泄露 id_rsa），就能保证 SSH 认证的安全性  \nSSH 方式 使用 Git 协议，默认端口 22，在某些环境下比 HTTPS 方式（走 443 端口）速度更快，尤其是 大文件传输 时表现更好。   \nHTTPS 方式 在访问私有仓库时，每次都需要身份验证，而 SSH 方式一旦设置好，访问私有仓库更方便。在某些内网或防火墙环境下，HTTPS 可能被拦截，而 SSH 可能不受影响，可以更稳定地访问 GitHub 或其他 Git 服务器。(校园网环境https基本传不出去doge)\n\nHTTPS方法git remote add origin 你的GitHub仓库地址（https地址）git remote add origin git branch -M main  # 将默认分支改为 main（可选，好习惯）\nSSH方法1. 首先要生成一个SSH Keyssh-keygen -t rsa -C &quot;你的GitHub邮箱&quot;\n一直按回车，直到生成完成   \n2. 添加SSH Key打开公钥文件，粘贴公钥并保存\ncat ~/.ssh/id_rsa.pub\n3. 把公钥添加到github中1. 点击右上角头像 → Settings\n2. 左侧栏点击 SSH and GPG keys\n3. 点击 New SSH key\n4. 粘贴公钥内容\n\n4. 测试是否成功ssh -T git@github.com\n如果成功会看到如下输出：\nHi 用户名! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.\n5. 链接本地仓库和Github仓库git remote add origin 你的GitHub仓库地址（ssh地址）\n检查连接情况输入以下命令即可看到当前仓库链接的所有远程仓库，对，一个本地仓库可以链接多个远程仓库的。\ngit remote -v\n输出github仓库地址即完成连接\n六、 提交代码git add . #添加内容进暂存区git commit -m &quot;提交信息&quot; #把暂存区内容存到本地仓库git push origin main #把本地仓库更改推送到远程仓库main分支\n\n七、回退版本回退到上一个版本\n保留代码修改（常用），保留代码和暂存区\n\ngit reset --soft HEAD^\n\n丢弃修改（常用），丢弃暂存区修改，保留代码\n\ngit reset --mixed HEAD^\n\n彻底删除（危险⚠️），回退commit+暂存+修改全清除\n\ngit reset --hard HEAD^\n回退到指定版本1. 查看commit记录git log\n会看到如下输出：\ncommit a1b2c3d4e5f6g7h8... #复制这段Author: xxxDate: ...Message: 修复登录问题\n2. 回退git reset --soft a1b2c3d\n或\ngit reset --mixed a1b2c3d\n或\ngit reset --hard a1b2c3d\n撤销回退1. 查看refloggit reflog\n会列出所有的操作记录\na1b2c3d HEAD@&#123;0&#125;: reset: moving to HEAD^e5f6g7h HEAD@&#123;1&#125;: commit: 修复登录问题\n2. 滚到指定操作记录git reset --hard e5f6g7h\n\n八、 新建分支\n\n\n优点\n说明\n\n\n\n✅ 避免冲突\n每人开发自己的功能，互不干扰。\n\n\n✅ 更清晰\n分支命名可以反映开发内容\n\n\n✅ 易于管理\n可以单独审核每个人的代码\n\n\n✅ 回退方便\n如果某个人的功能不稳定，可以只回滚或暂停该分支\n\n\n具体操作为：\n\n\n\ngit switch -c feature/mywork #创建并切换到新分支\n查看是否成功：\ngit branch -vv\n如果成功会有如下输出：\n* feature/mywork  123abc [origin/feature/mywork] commit message\n九、多人协作开发基本规定：\n\nmain ：主分支，保证是稳定版本\ndev ：开发分支，用于开发新的功能\nfeature&#x2F;xxxx ：功能分支，用于开发新的功能\nhotfix&#x2F;xxxx ：bug修复分支，用于修复bug\n\n1. 克隆主仓库git clone 仓库地址\n2. 切换到dev分支git checkout dev #切换到dev分支git pull origin dev #拉取远程dev分支到本地dev分支\n3. 创建自己的功能分支git switch -c feature/xxxx #创建并切换到新分支\n4. 开发自己的功能，并提交代码到feature&#x2F;xxxx分支,推送到远端分支5. 合并到dev分支（由管理员&#x2F;审核人执行）可以在远程仓库直接操作或在本地合并：\ngit checkout dev #切换到dev分支git pull origin dev #拉取远程dev分支到本地dev分支git merge feature/xxxx #合并feature/xxxx分支到dev分支git push origin dev #把dev分支推送到远程dev分支\n6. 删除已完成分支git branch -d feature/xxxx #删除本地分支git push origin --delete feature/xxxx #删除远端分支\n\n附加VsCode推送代码图形化界面，易于操作，原理同终端。\n\n把要保留更改的文件添加到暂存区\n写提交信息，把暂存区内容加入本地仓库\n点击发布，把本地仓库修改推送到远程仓库\n\n标准格式之前教的虽然够用，但其实每次推送提交的信息格式都不是很标准，用命令行操作过于复杂，可以使用VsCode的“git-commit-pligin”插件实现，具体过程不在赘述，请自行查阅插件说明\n结束总结以上内容只是Git的最基础的使用，也只是Git的冰山一角，Git还有很多很多功能没介绍到，大家可以自己去发现，之后发现好用的功能会不定时更新此文档   \n","tags":["git","教程"]},{"title":"关于我和这个博客","url":"/2025/05/07/about-me/","content":"个人信息笔者目前就读于杭州电子科技大学，是一名大二的学生，同时也是RoboMaster（以下简称RM）比赛的成员。我在RM25赛季负责步兵机器人的嵌入式研发，目前正在担任RM26赛季嵌入式电控组组长。\n兴趣爱好\n电子设计与DIY\n嵌入式开发：C， C++， MCU， ARM， STM32\n开源项目贡献\n足球， CS， PUBG， galgame…\n\n建站目的我很早就有建一个个人博客的想法，但是一直没空(并非没空，就是纯懒)，所以迟迟没有动手操作。现在我的比赛暂时告一段落，于是按照朋友推荐的方法，参照网上的资料搭建了你现在浏览的这个博客。\n其实我对很多好玩的东西都有浓厚的兴趣，但是由于我个人的能力问题，以及对自身控制力的不够，导致很多事情关注了但是没开始。或者开始了，遇到一个难题，然后又半途而废了。亦或者一个功能做出来了，但是背后的很多知识是没有掌握透的，于是也希望通过在这个博客分享记录，督促自己学习进步\n博客内容\n嵌入式相关知识的学习经验与成果展示\n其他一些有趣开源项目的学习记录\nACG相关内容，短评之类\n个人随记\n\n具体内容并没有一个标准，想到什么就发什么\n联系方式\nGithub: mouxuanjun\nEmail: hewenxuan040923@gmail.com\nQQ: 1583164119\n\n权限说明本博客全部内容（除特殊说明外）均采用 CC BY-NC-SA 4.0 协议进行许可。\n"}]